{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf0 \
--================================\
--Query starts here\
--================================\
\
-- SCRIPT PARAMETERS ================================================================================\
DECLARE @iso3 varchar(3)\
SET @iso3 = 'NGA'\
\
DECLARE @worktable_name varchar(MAX)\
SET @worktable_name = @iso3 + '_worktable'\
\
DECLARE @crop_spam_worktable_name varchar(MAX)\
SET @crop_spam_worktable_name = @iso3 + '_crop_spam_worktable'\
\
DECLARE @local_crop_thesaurus_name varchar(MAX)\
SET @local_crop_thesaurus_name = '[reference].dbo.crop_prep_to_local'\
\
DECLARE @spam_crop_thesaurus_name varchar(MAX)\
SET @spam_crop_thesaurus_name = '[reference].dbo.crop_prep_to_spam'\
\
\
-- UPDATE CROP_SPAM_WORKTABLE with crop_prep commodity mappings, \
-- then run this little query to update spam_4char and spam_order columns.\
/*\
EXEC('\
UPDATE a\
SET a.spam_4char = b.spam_4char , a.spam_order = b.spam_order\
FROM '+@crop_spam_worktable_name+' AS a\
INNER JOIN [reference].dbo.crop_prep_to_spam b\
ON a.crop_prep = b.crop_prep AND a.spam_schema = b.spam_schema\
')\
*/\
\
-- UPDATE REMANING NULL CROP_PREPS IN IS03_WORKTABLE WITH EDITS FROM CROP_WORKTABLE\
EXEC('\
UPDATE '+@worktable_name+' \
SET crop_prep = \
(	SELECT DISTINCT crop_prep \
	FROM '+@crop_spam_worktable_name+'\
	WHERE crop_raw = '+@worktable_name+'.crop_raw)')\
\
-- INSERT NEW ROWS (FROM CROP_WORKTABLE) INTO dictionary_crops \
EXEC ('\
INSERT INTO reference.dbo.dictionary_crops (iso3, local_name, crop_prep, spam_4char, spam_order, spam_schema)\
SELECT DISTINCT a.iso3, a.crop_raw, a.crop_prep, NULL, NULL, 2005\
FROM '+@crop_spam_worktable_name+' as a'\
)\
\
-- RE-UPDATE CROP_PREPS THAT 'MAY' HAVE BEEN DELETED \
EXEC ('\
UPDATE '+@worktable_name+'\
SET crop_prep = \
(	SELECT distinct crop_prep\
	FROM [reference].dbo.dictionary_crops a \
	WHERE a.local_name = crop_raw )')\
	\
\
\
-- EK: try to get spam_4char, spam_order from another row in the dictionary\
-- only rows with both spam_4char=null and spam_order=null are updated.\
EXEC('\
with temp(fao_code, fao_name, crop_prep, spam_4char, spam_order, spam_long) as \
(\
    -- select good values for spam_4char and spam_order \
    -- given the key crop_prep\
    -- assume there is only one for each crop_prep\
    select distinct fao_code, fao_name, crop_prep, spam_4char, spam_order, spam_long\
    from reference.dbo.dictionary_crops\
    where crop_prep is not null \
          and spam_4char is not null\
          and spam_order is not null\
          and spam_schema = 2005 \
)\
update upd\
set spam_4char=temp.spam_4char, \
    spam_order=temp.spam_order,\
	spam_long=temp.spam_long,\
	fao_code=temp.fao_code,\
	fao_name=temp.fao_name\
from reference.dbo.dictionary_crops as upd, temp\
where upd.crop_prep = temp.crop_prep \
      and upd.iso3='''+@iso3+''' \
      and upd.spam_4char is null\
      and upd.spam_order is null\
      and upd.spam_schema = 2005\
')\
\
/*\
-- INSERT NEW ROWS INTO CROP_PREP_TO LOCAL FROM CROP_WORKTABLE\
\
EXEC('\
INSERT INTO '+ @local_crop_thesaurus_name+' (iso3, local_name, crop_prep) \
SELECT DISTINCT '''+@iso3+''', crop_raw, crop_prep \
FROM '+@crop_spam_worktable_name+'\
WHERE update_table = 1\
')\
\
-- INSERT NEW ROWS INTO CROP_PREP_TO_SPAM FROM CROP_WORKTABLE \
EXEC('\
INSERT INTO '+ @spam_crop_thesaurus_name +' (spam_schema, spam_order, spam_4char, crop_prep) \
SELECT DISTINCT spam_schema, spam_order, spam_4char, crop_prep \
FROM '+@crop_spam_worktable_name+'\
WHERE update_table = 1\
')\
*/\
\
\
-- CREATES NEW UPDATED CROP_PREP_TO_SPAM TABLE AND CROP_PREP_TO_LOCAL TABLE\
\
\
DROP TABLE [reference].dbo.crop_prep_to_spam \
CREATE TABLE [reference].dbo.crop_prep_to_spam (\
spam_schema int,\
spam_order int,\
spam_4char varchar (255),\
spam_long varchar (255),\
crop_prep varchar (255)\
)\
\
INSERT INTO [reference].dbo.crop_prep_to_spam (spam_schema, spam_order, spam_4char, spam_long, crop_prep)\
SELECT DISTINCT spam_schema, spam_order, spam_4char, spam_long, crop_prep\
FROM [reference].dbo.dictionary_crops\
SELECT top 10 * from [reference].dbo.crop_prep_to_spam\
\
\
-- UPDATE REMANING NULL CROP_SPAM2000 and CROP_SPAM2005 IN IS03_WORKTABLE WITH EDITS FROM CROP_WORKTABLE\
\
EXEC ('\
UPDATE a\
SET a.crop_spam2000 = b.spam_4char\
FROM '+@worktable_name+' AS a\
INNER JOIN [reference].dbo.crop_prep_to_spam b\
ON a.crop_prep = b.crop_prep AND b.spam_schema = 2000\
')\
\
EXEC ('\
UPDATE a\
SET a.crop_spam2005 = b.spam_4char\
FROM '+@worktable_name+' AS a\
INNER JOIN [reference].dbo.crop_prep_to_spam b\
ON a.crop_prep = b.crop_prep AND b.spam_schema = 2005\
')\
\
\
-- Assign SPAM order, see script 6d to generate distinct spam_crop / order table first.\
EXEC ('\
UPDATE a\
SET a.order_2005 = b.spam_order\
FROM '+@worktable_name+' AS a\
INNER JOIN order_2005 as b\
ON a.crop_spam2005 = b.spam_4char\
')\
\
\
-- DROP SPAM CROP WORKTABLE\
--EXEC('DROP TABLE '+@crop_spam_worktable_name)\
EXEC('SELECT TOP 10 * FROM ' + @worktable_name)\
}